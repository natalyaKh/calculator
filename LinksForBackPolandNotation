  1. Классная методичка по структурам данных. Тут же написано про обходы дерева и про то, как это дерево правильно собрать для обратной польской зависимости
http://www.lib.unn.ru/students/src/struct.pdf

  2. Кщк одна статья по поводу теории и немножко практики (дерево рлюс стек)
  https://infopedia.su/3x61b6.html
  
  3. пример с подробным кодом 
  https://java.mazurok.com/?p=454

  4. Хороший комментарий по поводу дерева взят по ссылке https://forum.sources.ru/index.php?showtopic=271694

Конечно же "как"!
Если использовать метод рекурсивного спуска, посмотрите в интернете.
Суть его проста: для каждого элемента грамматики пишется отдельная процедура, которая возвращает часть дерева, описывающую данную конструкцию.
Пусть грамматика
Цитата
1. ФОРМУЛА ::= ФОРМУЛА ЗНАК ФОРМУЛА (формула есть две формулы, соединенные знаком)
2. ФОРМУЛА ::= ЧИСЛО (формула есть число)
3. ФОРМУЛА ::= ( ФОРМУЛА ) (формула есть формула в скобках)
4. ЗНАК ::= + | - | * | / (знак есть плюс или минус или умножить или разделить)
5. ЧИСЛО ::= ЦИФРА (число есть цифра)
6. ЧИСЛО ::= ЧИСЛО ЦИФРА (число есть число и цифра)
7. ЦИФРА ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 (цифра есть 0 или 1 или ... 9 )

и выражение:
(3+4) * 9

Тогда, будет такая работа:
ФОРМУЛА("(3+4) * 9") определяет выражение в скобках (правило 3), далее идёт вызов ФОРМУЛА("3+4"), который определяет что вначале -- число, вызов ЧИСЛО("3") возвращает узел дерева, который хранит информацию о слагаемом, далее в функции ФОРМУЛА("3+4") этот узел подвязывается слева к функции плюс, как один из аргументов, далее узел из ЧИСЛО("4") подвязывается как правый потомок функции плюс, и ФОРМУЛА("3+4") возвращает бинарное дерево для своего выражения. Далее самый первый вызов ФОРМУЛА("(3+4) * 9") определяет умножение, и бинарное дерево для "3+4" подвязывает к умножению как левого потомка, а, считав число 9, привязывает и правого потомка. В результате дерево

Цитата

_____*____
__+_____9_
3___4_____

